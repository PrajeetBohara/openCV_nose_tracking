import cv2
import pyautogui
from pynput.mouse import Controller

# Initialize the mouse controller
mouse = Controller()

# Load the face and nose cascades
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
nose_cascade = cv2.CascadeClassifier('C:/Users/Prajeet/haarcascade_mcs_nose.xml')

# Set up the webcam
cap = cv2.VideoCapture(0)

# Get screen width and height
screen_width, screen_height = pyautogui.size()

# Set the initial center for nose tracking and sensitivity
center_x, center_y = None, None
sensitivity = 2.0

def get_nose_coordinates(face_roi_gray, face_x, face_y):
    """Detect the nose from the face region of interest."""
    noses = nose_cascade.detectMultiScale(face_roi_gray, 1.3, 5)
    for (nx, ny, nw, nh) in noses:
        nose_x = face_x + nx + nw // 2
        nose_y = face_y + ny + nh // 2
        return nose_x, nose_y
    return None, None

def move_mouse(nose_x, nose_y, center_x, center_y):
    """Move the mouse based on the nose movement."""
    delta_x = nose_x - center_x
    delta_y = nose_y - center_y

    # Apply sensitivity to the movement
    move_x = delta_x * sensitivity
    move_y = delta_y * sensitivity

    current_mouse_x, current_mouse_y = mouse.position

    # Calculate the new mouse position within screen bounds
    new_mouse_x = max(0, min(current_mouse_x + move_x, screen_width - 1))
    new_mouse_y = max(0, min(current_mouse_y + move_y, screen_height - 1))

    # Update mouse position
    mouse.position = (new_mouse_x, new_mouse_y)

def process_frame(frame):
    """Process each frame and detect faces and nose."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    global center_x, center_y
    
    for (x, y, w, h) in faces:
        face_roi_gray = gray[y:y+h, x:x+w]
        nose_x, nose_y = get_nose_coordinates(face_roi_gray, x, y)

        if nose_x is not None and nose_y is not None:
            cv2.circle(frame, (nose_x, nose_y), 5, (0, 255, 0), -1)

            if center_x is None and center_y is None:
                center_x, center_y = nose_x, nose_y

            # Move mouse based on nose position
            move_mouse(nose_x, nose_y, center_x, center_y)
            break

    return frame

def main():
    """Main loop to capture frames and process them."""
    global cap

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Process the current frame
        frame = process_frame(frame)

        # Show the frame
        cv2.imshow('Head Movement Mouse Control', frame)

        # Exit condition when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release resources
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
